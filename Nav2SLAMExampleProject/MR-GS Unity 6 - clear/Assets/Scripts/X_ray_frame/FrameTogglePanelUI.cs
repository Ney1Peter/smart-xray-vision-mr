using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.XR;
using UnityEngine.UI;
using Meta.XR.MRUtilityKit;

/// <summary>
/// Manages a world-space UI panel that appears in front of the user when pressing the A button,
/// containing toggles for Wall, Ceiling, Floor, Window, and Table frames generated by highlighters.
/// </summary>
public class FrameTogglePanelUI : MonoBehaviour
{
    [Header("UI Panel Prefab")]
    public GameObject panelPrefab;      // World-space Canvas prefab with Buttons
    public float showDistance = 1.5f;

    [Header("Frame Root")]
    public Transform frameRoot;         // Root transform containing all generated frame objects

    private GameObject panelInstance;
    private InputDevice rightController;
    private bool prevA;
    private Camera mainCam;

    void Awake()
    {
        mainCam = Camera.main;
        InputDevices.deviceConnected += OnDeviceConnected;
        RefreshController();
    }

    void OnDestroy()
    {
        InputDevices.deviceConnected -= OnDeviceConnected;
    }

    private void OnDeviceConnected(InputDevice device)
    {
        if ((device.characteristics & InputDeviceCharacteristics.Right) != 0 &&
            (device.characteristics & InputDeviceCharacteristics.Controller) != 0)
        {
            rightController = device;
        }
    }

    private void RefreshController()
    {
        var devices = new List<InputDevice>();
        InputDevices.GetDevicesWithCharacteristics(
            InputDeviceCharacteristics.HeldInHand |
            InputDeviceCharacteristics.Right |
            InputDeviceCharacteristics.Controller,
            devices);
        if (devices.Count > 0)
            rightController = devices[0];
    }

    void Update()
    {
        if (!rightController.isValid)
            RefreshController();

        bool aPressed = false;
        if (rightController.isValid &&
            rightController.TryGetFeatureValue(CommonUsages.primaryButton, out aPressed))
        {
            if (aPressed && !prevA)
                TogglePanel();
        }
        prevA = aPressed;
    }

    void TogglePanel()
    {
        if (panelInstance == null)
        {
            panelInstance = Instantiate(panelPrefab);
            panelInstance.transform.SetParent(mainCam.transform, false);
            panelInstance.transform.localPosition = Vector3.forward * showDistance;
            panelInstance.transform.localRotation = Quaternion.LookRotation(-mainCam.transform.forward, mainCam.transform.up);

            // Bind button callbacks
            var buttons = panelInstance.GetComponentsInChildren<Button>(true);
            foreach (var btn in buttons)
            {
                switch (btn.gameObject.name)
                {
                    case "BtnWall":
                        btn.onClick.AddListener(ToggleWallFrames);
                        break;
                    case "BtnCeiling":
                        btn.onClick.AddListener(ToggleCeilingFrames);
                        break;
                    case "BtnFloor":
                        btn.onClick.AddListener(ToggleFloorFrames);
                        break;
                    case "BtnWindow":
                        btn.onClick.AddListener(ToggleWindowFrames);
                        break;
                    case "BtnTable":
                        btn.onClick.AddListener(ToggleTableFrames);
                        break;
                    default:
                        Debug.LogWarning($"Unrecognized button: {btn.gameObject.name}");
                        break;
                }
            }
            Debug.Log("TogglePanel: Panel instantiated and callbacks bound.");
        }
        else
        {
            Debug.Log("TogglePanel: Destroying panelInstance.");
            Destroy(panelInstance);
            panelInstance = null;
        }
    }

    void ToggleWallFrames()
    {
        Debug.Log("ToggleWallFrames() called");
        if (frameRoot == null) { Debug.LogWarning("frameRoot is null"); return; }
        foreach (var tf in frameRoot.GetComponentsInChildren<Transform>(true))
        {
            if (tf.name.StartsWith("WallFrame_"))
            {
                bool old = tf.gameObject.activeSelf;
                Debug.Log($"  Found {tf.name} (active={old}), toggling to {!old}");
                tf.gameObject.SetActive(!old);
            }
        }
    }

    void ToggleCeilingFrames()
    {
        Debug.Log("ToggleCeilingFrames() called");
        if (frameRoot == null) { Debug.LogWarning("frameRoot is null"); return; }
        foreach (var tf in frameRoot.GetComponentsInChildren<Transform>(true))
        {
            if (tf.name.StartsWith("CeilingFrame_"))
            {
                bool old = tf.gameObject.activeSelf;
                Debug.Log($"  Found {tf.name} (active={old}), toggling to {!old}");
                tf.gameObject.SetActive(!old);
            }
        }
    }

    void ToggleFloorFrames()
    {
        Debug.Log("ToggleFloorFrames() called");
        if (frameRoot == null) { Debug.LogWarning("frameRoot is null"); return; }
        foreach (var tf in frameRoot.GetComponentsInChildren<Transform>(true))
        {
            if (tf.name.StartsWith("FloorFrame_"))
            {
                bool old = tf.gameObject.activeSelf;
                Debug.Log($"  Found {tf.name} (active={old}), toggling to {!old}");
                tf.gameObject.SetActive(!old);
            }
        }
    }

    void ToggleWindowFrames()
    {
        Debug.Log("ToggleWindowFrames() called");
        if (frameRoot == null) { Debug.LogWarning("frameRoot is null"); return; }
        foreach (var tf in frameRoot.GetComponentsInChildren<Transform>(true))
        {
            if (tf.name.StartsWith("WindowFrame_"))
            {
                bool old = tf.gameObject.activeSelf;
                Debug.Log($"  Found {tf.name} (active={old}), toggling to {!old}");
                tf.gameObject.SetActive(!old);
            }
        }
    }

    void ToggleTableFrames()
    {
        Debug.Log("ToggleTableFrames() called");
        if (frameRoot == null) { Debug.LogWarning("frameRoot is null"); return; }
        foreach (var tf in frameRoot.GetComponentsInChildren<Transform>(true))
        {
            if (tf.name.StartsWith("TableFrame_"))
            {
                bool old = tf.gameObject.activeSelf;
                Debug.Log($"  Found {tf.name} (active={old}), toggling to {!old}");
                tf.gameObject.SetActive(!old);
            }
        }
    }
}
